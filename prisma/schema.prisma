generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
  email                     String                     @unique
  essayAssessments          EssayAssessment[]
  identificationAssessments IdentificationAssessment[]
  createdAt                 DateTime                   @default(now())
}

model EssayAssessment {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  essayQuestions EssayQuestion[]
  userId         String          @db.ObjectId
  user           User            @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  essayResults   EssayResult[]
}

model IdentificationAssessment {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  identificationQuestions IdentificationQuestion[]
  userId                  String                   @db.ObjectId
  user                    User                     @relation(fields: [userId], references: [id])
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  identificationResults   IdentificationResult[]
}

model IdentificationQuestion {
  id             String                         @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  correctAnswer  String
  assessmentId   String                         @db.ObjectId
  assessment     IdentificationAssessment       @relation(fields: [assessmentId], references: [id])
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
  QuestionResult IdentificationQuestionResult[]
}

model EssayQuestion {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  essayCriteria EssayCriteria[]
  assessmentId  String                @db.ObjectId
  assessment    EssayAssessment       @relation(fields: [assessmentId], references: [id])
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  EssayResult   EssayQuestionResult[]
}

model EssayCriteria {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  criteria        String
  maxScore        Int
  rubrics         Rubric[]
  essayQuestionId String                @db.ObjectId
  essayQuestion   EssayQuestion         @relation(fields: [essayQuestionId], references: [id])
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  criteriaResults EssayCriteriaResult[]
}

model Rubric {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  score       String
  description String
  criteriaId  String        @db.ObjectId
  criteria    EssayCriteria @relation(fields: [criteriaId], references: [id])
}

model EssayResult {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  studentName     String
  score           Int
  assessmentId    String                @db.ObjectId
  assessment      EssayAssessment       @relation(fields: [assessmentId], references: [id])
  createdAt       DateTime              @default(now())
  questionResults EssayQuestionResult[]
}

model EssayQuestionResult {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  score                Int
  resultId             String                @db.ObjectId
  result               EssayResult           @relation(fields: [resultId], references: [id])
  questionId           String                @db.ObjectId
  question             EssayQuestion         @relation(fields: [questionId], references: [id])
  createdAt            DateTime              @default(now())
  essayCriteriaResults EssayCriteriaResult[]
}

model EssayCriteriaResult {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  score            Int
  questionResultId String              @db.ObjectId
  questionResult   EssayQuestionResult @relation(fields: [questionResultId], references: [id])
  criteriaId       String              @db.ObjectId
  criteria         EssayCriteria       @relation(fields: [criteriaId], references: [id])
  createdAt        DateTime            @default(now())
}

model IdentificationResult {
  id              String                         @id @default(auto()) @map("_id") @db.ObjectId
  studentName     String
  assessmentId    String                         @db.ObjectId
  assessment      IdentificationAssessment       @relation(fields: [assessmentId], references: [id])
  questionResults IdentificationQuestionResult[]
}

model IdentificationQuestionResult {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  isCorrect  Boolean
  resultId   String                 @db.ObjectId
  result     IdentificationResult   @relation(fields: [resultId], references: [id])
  questionId String                 @db.ObjectId
  question   IdentificationQuestion @relation(fields: [questionId], references: [id])
  createdAt  DateTime               @default(now())
}
